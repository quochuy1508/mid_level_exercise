type Query {
    customerTraining (
        id: Int @doc(description: "Id of customer Training") @doc(description: "The customerTraining query returns information about a customerTraining")
    ): CustomerTrainingOutput @resolver(class: "Magenest\\DatabaseConnection\\Model\\Resolver\\CustomerTraining")
    @doc(description: "The customerTraining query returns information about a customerTraining")

    customersTraining (
        filter: CustomerTrainingFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
        sort: ProductAttributeSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
    ): customersTrainingOutput @resolver(class: "Magenest\\DatabaseConnection\\Model\\Resolver\\CustomersTraining")
    @doc(description: "The customerTraining query returns information about a customerTraining")
}

type Mutation {
    createCustomerTraining(input: createCustomerTrainingInput): CustomerTrainingOutput @resolver(class: "\\Magenest\\DatabaseConnection\\Model\\Resolver\\CreateCustomerTraining") @doc(description:"Creates an customer training")
    deleteCustomerTraining(id: Int!): Boolean @resolver(class: "\\Magenest\\DatabaseConnection\\Model\\Resolver\\DeleteCustomerTraining") @doc(description:"Creates an customer training")
}

input createCustomerTrainingInput {
    first_name: String!
    last_name: String!
    address: String!
    city: String!
    age: Int!
    entity_id: Int
}

type CustomerTrainingOutput @doc(description: "CMS page defines all CMS page information") {
    entity_id: Int @doc(description: "id of the customer")
    first_name: String @doc(description: "First Name")
    last_name: String @doc(description: "Last Name")
    address: String @doc(description: "Address")
    city: String @doc(description: "City")
    age: Int @doc(description: "Age")
}

type customersTrainingOutput @doc(description: "The customersTraining object is the top-level object returned in a product search.") {
    items: [CustomerTrainingOutput] @doc(description: "An array of products that match the specified search criteria.")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    total_count: Int @doc(description: "The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not.")
}

input CustomerTrainingFilterInput  @doc(description: "CategoryFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.")
{
    first_name: FilterMatchTypeInput @doc(description: "Filter by the display name of the category.")
    last_name: FilterMatchTypeInput @doc(description: "Filter by the display name of the category.")
    address: FilterMatchTypeInput @doc(description: "Filter by the display name of the category.")
    city: FilterMatchTypeInput @doc(description: "Filter by the display name of the category.")
    entity_id: FilterEqualTypeInput @doc(description: "Filter by the URL path for the category.")
    age: FilterEqualTypeInput @doc(description: "Filter by the URL path for the category.")
}
